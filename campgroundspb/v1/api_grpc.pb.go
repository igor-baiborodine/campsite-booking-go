// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: campgroundspb/v1/api.proto

package campgroundspbv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CampgroundsService_GetCampsites_FullMethodName   = "/campgroundspb.v1.CampgroundsService/GetCampsites"
	CampgroundsService_CreateCampsite_FullMethodName = "/campgroundspb.v1.CampgroundsService/CreateCampsite"
	CampgroundsService_GetBooking_FullMethodName     = "/campgroundspb.v1.CampgroundsService/GetBooking"
	CampgroundsService_CreateBooking_FullMethodName  = "/campgroundspb.v1.CampgroundsService/CreateBooking"
	CampgroundsService_UpdateBooking_FullMethodName  = "/campgroundspb.v1.CampgroundsService/UpdateBooking"
	CampgroundsService_CancelBooking_FullMethodName  = "/campgroundspb.v1.CampgroundsService/CancelBooking"
	CampgroundsService_GetVacantDates_FullMethodName = "/campgroundspb.v1.CampgroundsService/GetVacantDates"
)

// CampgroundsServiceClient is the client API for CampgroundsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CampgroundsServiceClient interface {
	GetCampsites(ctx context.Context, in *GetCampsitesRequest, opts ...grpc.CallOption) (*GetCampsitesResponse, error)
	CreateCampsite(ctx context.Context, in *CreateCampsiteRequest, opts ...grpc.CallOption) (*CreateCampsiteResponse, error)
	GetBooking(ctx context.Context, in *GetBookingRequest, opts ...grpc.CallOption) (*GetBookingResponse, error)
	CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*CreateBookingResponse, error)
	UpdateBooking(ctx context.Context, in *UpdateBookingRequest, opts ...grpc.CallOption) (*UpdateBookingResponse, error)
	CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*CancelBookingResponse, error)
	GetVacantDates(ctx context.Context, in *GetVacantDatesRequest, opts ...grpc.CallOption) (*GetVacantDatesResponse, error)
}

type campgroundsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCampgroundsServiceClient(cc grpc.ClientConnInterface) CampgroundsServiceClient {
	return &campgroundsServiceClient{cc}
}

func (c *campgroundsServiceClient) GetCampsites(ctx context.Context, in *GetCampsitesRequest, opts ...grpc.CallOption) (*GetCampsitesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCampsitesResponse)
	err := c.cc.Invoke(ctx, CampgroundsService_GetCampsites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campgroundsServiceClient) CreateCampsite(ctx context.Context, in *CreateCampsiteRequest, opts ...grpc.CallOption) (*CreateCampsiteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCampsiteResponse)
	err := c.cc.Invoke(ctx, CampgroundsService_CreateCampsite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campgroundsServiceClient) GetBooking(ctx context.Context, in *GetBookingRequest, opts ...grpc.CallOption) (*GetBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookingResponse)
	err := c.cc.Invoke(ctx, CampgroundsService_GetBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campgroundsServiceClient) CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*CreateBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBookingResponse)
	err := c.cc.Invoke(ctx, CampgroundsService_CreateBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campgroundsServiceClient) UpdateBooking(ctx context.Context, in *UpdateBookingRequest, opts ...grpc.CallOption) (*UpdateBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBookingResponse)
	err := c.cc.Invoke(ctx, CampgroundsService_UpdateBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campgroundsServiceClient) CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*CancelBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelBookingResponse)
	err := c.cc.Invoke(ctx, CampgroundsService_CancelBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campgroundsServiceClient) GetVacantDates(ctx context.Context, in *GetVacantDatesRequest, opts ...grpc.CallOption) (*GetVacantDatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVacantDatesResponse)
	err := c.cc.Invoke(ctx, CampgroundsService_GetVacantDates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampgroundsServiceServer is the server API for CampgroundsService service.
// All implementations must embed UnimplementedCampgroundsServiceServer
// for forward compatibility
type CampgroundsServiceServer interface {
	GetCampsites(context.Context, *GetCampsitesRequest) (*GetCampsitesResponse, error)
	CreateCampsite(context.Context, *CreateCampsiteRequest) (*CreateCampsiteResponse, error)
	GetBooking(context.Context, *GetBookingRequest) (*GetBookingResponse, error)
	CreateBooking(context.Context, *CreateBookingRequest) (*CreateBookingResponse, error)
	UpdateBooking(context.Context, *UpdateBookingRequest) (*UpdateBookingResponse, error)
	CancelBooking(context.Context, *CancelBookingRequest) (*CancelBookingResponse, error)
	GetVacantDates(context.Context, *GetVacantDatesRequest) (*GetVacantDatesResponse, error)
	mustEmbedUnimplementedCampgroundsServiceServer()
}

// UnimplementedCampgroundsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCampgroundsServiceServer struct {
}

func (UnimplementedCampgroundsServiceServer) GetCampsites(context.Context, *GetCampsitesRequest) (*GetCampsitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampsites not implemented")
}
func (UnimplementedCampgroundsServiceServer) CreateCampsite(context.Context, *CreateCampsiteRequest) (*CreateCampsiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampsite not implemented")
}
func (UnimplementedCampgroundsServiceServer) GetBooking(context.Context, *GetBookingRequest) (*GetBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooking not implemented")
}
func (UnimplementedCampgroundsServiceServer) CreateBooking(context.Context, *CreateBookingRequest) (*CreateBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBooking not implemented")
}
func (UnimplementedCampgroundsServiceServer) UpdateBooking(context.Context, *UpdateBookingRequest) (*UpdateBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBooking not implemented")
}
func (UnimplementedCampgroundsServiceServer) CancelBooking(context.Context, *CancelBookingRequest) (*CancelBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBooking not implemented")
}
func (UnimplementedCampgroundsServiceServer) GetVacantDates(context.Context, *GetVacantDatesRequest) (*GetVacantDatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVacantDates not implemented")
}
func (UnimplementedCampgroundsServiceServer) mustEmbedUnimplementedCampgroundsServiceServer() {}

// UnsafeCampgroundsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CampgroundsServiceServer will
// result in compilation errors.
type UnsafeCampgroundsServiceServer interface {
	mustEmbedUnimplementedCampgroundsServiceServer()
}

func RegisterCampgroundsServiceServer(s grpc.ServiceRegistrar, srv CampgroundsServiceServer) {
	s.RegisterService(&CampgroundsService_ServiceDesc, srv)
}

func _CampgroundsService_GetCampsites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampsitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampgroundsServiceServer).GetCampsites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampgroundsService_GetCampsites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampgroundsServiceServer).GetCampsites(ctx, req.(*GetCampsitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampgroundsService_CreateCampsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCampsiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampgroundsServiceServer).CreateCampsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampgroundsService_CreateCampsite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampgroundsServiceServer).CreateCampsite(ctx, req.(*CreateCampsiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampgroundsService_GetBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampgroundsServiceServer).GetBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampgroundsService_GetBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampgroundsServiceServer).GetBooking(ctx, req.(*GetBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampgroundsService_CreateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampgroundsServiceServer).CreateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampgroundsService_CreateBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampgroundsServiceServer).CreateBooking(ctx, req.(*CreateBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampgroundsService_UpdateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampgroundsServiceServer).UpdateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampgroundsService_UpdateBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampgroundsServiceServer).UpdateBooking(ctx, req.(*UpdateBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampgroundsService_CancelBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampgroundsServiceServer).CancelBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampgroundsService_CancelBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampgroundsServiceServer).CancelBooking(ctx, req.(*CancelBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampgroundsService_GetVacantDates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVacantDatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampgroundsServiceServer).GetVacantDates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampgroundsService_GetVacantDates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampgroundsServiceServer).GetVacantDates(ctx, req.(*GetVacantDatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CampgroundsService_ServiceDesc is the grpc.ServiceDesc for CampgroundsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CampgroundsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "campgroundspb.v1.CampgroundsService",
	HandlerType: (*CampgroundsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCampsites",
			Handler:    _CampgroundsService_GetCampsites_Handler,
		},
		{
			MethodName: "CreateCampsite",
			Handler:    _CampgroundsService_CreateCampsite_Handler,
		},
		{
			MethodName: "GetBooking",
			Handler:    _CampgroundsService_GetBooking_Handler,
		},
		{
			MethodName: "CreateBooking",
			Handler:    _CampgroundsService_CreateBooking_Handler,
		},
		{
			MethodName: "UpdateBooking",
			Handler:    _CampgroundsService_UpdateBooking_Handler,
		},
		{
			MethodName: "CancelBooking",
			Handler:    _CampgroundsService_CancelBooking_Handler,
		},
		{
			MethodName: "GetVacantDates",
			Handler:    _CampgroundsService_GetVacantDates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "campgroundspb/v1/api.proto",
}
