name: ci

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  lint:
    name: Format, lint & proto validation
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target_os: [ "linux" ]
        target_arch: [ "amd64" ]
    env:
      GOLANGCILINT_VER: "v1.60.3"
      GOOS: "${{ matrix.target_os }}"
      GOARCH: "${{ matrix.target_arch }}"
      GOPROXY: "https://proxy.golang.org"
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - name: Run mod tidy, check diff
        run: make mod-tidy check-mod-diff
      - name: Set up Buf
        uses: bufbuild/buf-setup-action@v1.34.0
      - name: Run format proto, check diff
        run: make format-proto check-proto-diff
      - name: Run lint proto, check diff
        run: make lint-proto check-proto-diff
      - name: Run generate proto, check diff
        run: make init-proto gen-proto check-proto-diff
      - name: Run format, check diff
        run: make init-format format check-format-diff
      - name: Run generate mock, check diff
        run: make init-mock gen-mock check-mock-diff
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3.7.0
        with:
          version: ${{ env.GOLANGCILINT_VER }}
          skip-cache: true
  unit-tests:
    name: Unit tests
    needs: lint
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target_os: linux
            target_arch: amd64
    env:
      GOOS: "${{ matrix.target_os }}"
      GOARCH: "${{ matrix.target_arch }}"
      GOPROXY: "https://proxy.golang.org"
      TEST_REPORT_FILE_PREFIX: "test_report"
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - name: Run tests
        env:
          COVERAGE_OPTS: "-coverprofile=coverage.txt -covermode=atomic"
        run: make test
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  integration-tests:
    name: Integration tests
    needs: lint
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target_os: linux
            target_arch: amd64
    env:
      GOOS: "${{ matrix.target_os }}"
      GOARCH: "${{ matrix.target_arch }}"
      GOPROXY: "https://proxy.golang.org"
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - name: Run integration tests
        run: make test-integration
  docker-build:
    name: Build Docker image
    if: ${{ github.event_name == 'pull_request' }}
    needs: [ unit-tests, integration-tests ]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Build image
        uses: docker/build-push-action@v6
        with:
          push: false
          context: .
          file: docker/Dockerfile
  semver-tag:
    name: Semver tag
    needs: [ unit-tests, integration-tests ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Nex version
        id: next-version
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          minorList: feat
          patchList: build,chore,ci,docs,style,refactor,perf,test
      - uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ steps.next-version.outputs.next }}
          tag_exists_error: true
  docker-publish:
    name: Publish Docker image
    needs: [ semver-tag ]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ibaiborodine/campsite-booking-go
          tags: |
            type=ref,event=tag
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          file: docker/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
