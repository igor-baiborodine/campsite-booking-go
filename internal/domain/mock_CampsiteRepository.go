// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCampsiteRepository creates a new instance of MockCampsiteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCampsiteRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCampsiteRepository {
	mock := &MockCampsiteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCampsiteRepository is an autogenerated mock type for the CampsiteRepository type
type MockCampsiteRepository struct {
	mock.Mock
}

type MockCampsiteRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCampsiteRepository) EXPECT() *MockCampsiteRepository_Expecter {
	return &MockCampsiteRepository_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function for the type MockCampsiteRepository
func (_mock *MockCampsiteRepository) FindAll(ctx context.Context) ([]*Campsite, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*Campsite
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*Campsite, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*Campsite); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Campsite)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCampsiteRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockCampsiteRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCampsiteRepository_Expecter) FindAll(ctx interface{}) *MockCampsiteRepository_FindAll_Call {
	return &MockCampsiteRepository_FindAll_Call{Call: _e.mock.On("FindAll", ctx)}
}

func (_c *MockCampsiteRepository_FindAll_Call) Run(run func(ctx context.Context)) *MockCampsiteRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCampsiteRepository_FindAll_Call) Return(campsites []*Campsite, err error) *MockCampsiteRepository_FindAll_Call {
	_c.Call.Return(campsites, err)
	return _c
}

func (_c *MockCampsiteRepository_FindAll_Call) RunAndReturn(run func(ctx context.Context) ([]*Campsite, error)) *MockCampsiteRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type MockCampsiteRepository
func (_mock *MockCampsiteRepository) Insert(ctx context.Context, campsite *Campsite) error {
	ret := _mock.Called(ctx, campsite)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Campsite) error); ok {
		r0 = returnFunc(ctx, campsite)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCampsiteRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockCampsiteRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - campsite *Campsite
func (_e *MockCampsiteRepository_Expecter) Insert(ctx interface{}, campsite interface{}) *MockCampsiteRepository_Insert_Call {
	return &MockCampsiteRepository_Insert_Call{Call: _e.mock.On("Insert", ctx, campsite)}
}

func (_c *MockCampsiteRepository_Insert_Call) Run(run func(ctx context.Context, campsite *Campsite)) *MockCampsiteRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Campsite
		if args[1] != nil {
			arg1 = args[1].(*Campsite)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCampsiteRepository_Insert_Call) Return(err error) *MockCampsiteRepository_Insert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCampsiteRepository_Insert_Call) RunAndReturn(run func(ctx context.Context, campsite *Campsite) error) *MockCampsiteRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}
