// Code generated by mockery v2.43.1. DO NOT EDIT.

package domain

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockBookingRepository is an autogenerated mock type for the BookingRepository type
type MockBookingRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, bookingID
func (_m *MockBookingRepository) Find(ctx context.Context, bookingID string) (*Booking, error) {
	ret := _m.Called(ctx, bookingID)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Booking, error)); ok {
		return rf(ctx, bookingID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Booking); ok {
		r0 = rf(ctx, bookingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Booking)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bookingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindForDateRange provides a mock function with given fields: ctx, campsiteID, startDate, endDate
func (_m *MockBookingRepository) FindForDateRange(ctx context.Context, campsiteID string, startDate time.Time, endDate time.Time) ([]*Booking, error) {
	ret := _m.Called(ctx, campsiteID, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for FindForDateRange")
	}

	var r0 []*Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) ([]*Booking, error)); ok {
		return rf(ctx, campsiteID, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) []*Booking); ok {
		r0 = rf(ctx, campsiteID, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Booking)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, campsiteID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, booking
func (_m *MockBookingRepository) Insert(ctx context.Context, booking *Booking) error {
	ret := _m.Called(ctx, booking)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Booking) error); ok {
		r0 = rf(ctx, booking)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, booking
func (_m *MockBookingRepository) Update(ctx context.Context, booking *Booking) error {
	ret := _m.Called(ctx, booking)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Booking) error); ok {
		r0 = rf(ctx, booking)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockBookingRepository creates a new instance of MockBookingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookingRepository {
	mock := &MockBookingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
