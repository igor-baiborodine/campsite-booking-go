// Code generated by mockery v2.42.3. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCampsiteRepository is an autogenerated mock type for the CampsiteRepository type
type MockCampsiteRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx
func (_m *MockCampsiteRepository) FindAll(ctx context.Context) ([]*Campsite, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*Campsite
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Campsite, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Campsite); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Campsite)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, campsite
func (_m *MockCampsiteRepository) Insert(ctx context.Context, campsite *Campsite) error {
	ret := _m.Called(ctx, campsite)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Campsite) error); ok {
		r0 = rf(ctx, campsite)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockCampsiteRepository creates a new instance of MockCampsiteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCampsiteRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCampsiteRepository {
	mock := &MockCampsiteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
