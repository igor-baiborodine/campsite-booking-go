// Code generated by mockery v2.43.1. DO NOT EDIT.

package waiter

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockWaiter is an autogenerated mock type for the Waiter type
type MockWaiter struct {
	mock.Mock
}

// Add provides a mock function with given fields: fns
func (_m *MockWaiter) Add(fns ...WaitFunc) {
	_va := make([]interface{}, len(fns))
	for _i := range fns {
		_va[_i] = fns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// CancelFunc provides a mock function with given fields:
func (_m *MockWaiter) CancelFunc() context.CancelFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CancelFunc")
	}

	var r0 context.CancelFunc
	if rf, ok := ret.Get(0).(func() context.CancelFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.CancelFunc)
		}
	}

	return r0
}

// Context provides a mock function with given fields:
func (_m *MockWaiter) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Wait provides a mock function with given fields:
func (_m *MockWaiter) Wait() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockWaiter creates a new instance of MockWaiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWaiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWaiter {
	mock := &MockWaiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
