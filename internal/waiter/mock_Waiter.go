// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package waiter

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockWaiter creates a new instance of MockWaiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWaiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWaiter {
	mock := &MockWaiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWaiter is an autogenerated mock type for the Waiter type
type MockWaiter struct {
	mock.Mock
}

type MockWaiter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWaiter) EXPECT() *MockWaiter_Expecter {
	return &MockWaiter_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockWaiter
func (_mock *MockWaiter) Add(fns ...WaitFunc) {
	// WaitFunc
	_va := make([]interface{}, len(fns))
	for _i := range fns {
		_va[_i] = fns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_mock.Called(_ca...)
	return
}

// MockWaiter_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockWaiter_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - fns ...WaitFunc
func (_e *MockWaiter_Expecter) Add(fns ...interface{}) *MockWaiter_Add_Call {
	return &MockWaiter_Add_Call{Call: _e.mock.On("Add",
		append([]interface{}{}, fns...)...)}
}

func (_c *MockWaiter_Add_Call) Run(run func(fns ...WaitFunc)) *MockWaiter_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []WaitFunc
		variadicArgs := make([]WaitFunc, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(WaitFunc)
			}
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockWaiter_Add_Call) Return() *MockWaiter_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWaiter_Add_Call) RunAndReturn(run func(fns ...WaitFunc)) *MockWaiter_Add_Call {
	_c.Run(run)
	return _c
}

// CancelFunc provides a mock function for the type MockWaiter
func (_mock *MockWaiter) CancelFunc() context.CancelFunc {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CancelFunc")
	}

	var r0 context.CancelFunc
	if returnFunc, ok := ret.Get(0).(func() context.CancelFunc); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.CancelFunc)
		}
	}
	return r0
}

// MockWaiter_CancelFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelFunc'
type MockWaiter_CancelFunc_Call struct {
	*mock.Call
}

// CancelFunc is a helper method to define mock.On call
func (_e *MockWaiter_Expecter) CancelFunc() *MockWaiter_CancelFunc_Call {
	return &MockWaiter_CancelFunc_Call{Call: _e.mock.On("CancelFunc")}
}

func (_c *MockWaiter_CancelFunc_Call) Run(run func()) *MockWaiter_CancelFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWaiter_CancelFunc_Call) Return(cancelFunc context.CancelFunc) *MockWaiter_CancelFunc_Call {
	_c.Call.Return(cancelFunc)
	return _c
}

func (_c *MockWaiter_CancelFunc_Call) RunAndReturn(run func() context.CancelFunc) *MockWaiter_CancelFunc_Call {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function for the type MockWaiter
func (_mock *MockWaiter) Context() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockWaiter_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type MockWaiter_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *MockWaiter_Expecter) Context() *MockWaiter_Context_Call {
	return &MockWaiter_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *MockWaiter_Context_Call) Run(run func()) *MockWaiter_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWaiter_Context_Call) Return(context1 context.Context) *MockWaiter_Context_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *MockWaiter_Context_Call) RunAndReturn(run func() context.Context) *MockWaiter_Context_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function for the type MockWaiter
func (_mock *MockWaiter) Wait() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWaiter_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type MockWaiter_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *MockWaiter_Expecter) Wait() *MockWaiter_Wait_Call {
	return &MockWaiter_Wait_Call{Call: _e.mock.On("Wait")}
}

func (_c *MockWaiter_Wait_Call) Run(run func()) *MockWaiter_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWaiter_Wait_Call) Return(err error) *MockWaiter_Wait_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWaiter_Wait_Call) RunAndReturn(run func() error) *MockWaiter_Wait_Call {
	_c.Call.Return(run)
	return _c
}
