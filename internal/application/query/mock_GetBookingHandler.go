// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package query

import (
	"context"

	"github.com/igor-baiborodine/campsite-booking-go/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockGetBookingHandler creates a new instance of MockGetBookingHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetBookingHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetBookingHandler {
	mock := &MockGetBookingHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGetBookingHandler is an autogenerated mock type for the GetBookingHandler type
type MockGetBookingHandler struct {
	mock.Mock
}

type MockGetBookingHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetBookingHandler) EXPECT() *MockGetBookingHandler_Expecter {
	return &MockGetBookingHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function for the type MockGetBookingHandler
func (_mock *MockGetBookingHandler) Handle(ctx context.Context, qry GetBooking) (*domain.Booking, error) {
	ret := _mock.Called(ctx, qry)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 *domain.Booking
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetBooking) (*domain.Booking, error)); ok {
		return returnFunc(ctx, qry)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetBooking) *domain.Booking); ok {
		r0 = returnFunc(ctx, qry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Booking)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, GetBooking) error); ok {
		r1 = returnFunc(ctx, qry)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGetBookingHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockGetBookingHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - qry GetBooking
func (_e *MockGetBookingHandler_Expecter) Handle(ctx interface{}, qry interface{}) *MockGetBookingHandler_Handle_Call {
	return &MockGetBookingHandler_Handle_Call{Call: _e.mock.On("Handle", ctx, qry)}
}

func (_c *MockGetBookingHandler_Handle_Call) Run(run func(ctx context.Context, qry GetBooking)) *MockGetBookingHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 GetBooking
		if args[1] != nil {
			arg1 = args[1].(GetBooking)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGetBookingHandler_Handle_Call) Return(booking *domain.Booking, err error) *MockGetBookingHandler_Handle_Call {
	_c.Call.Return(booking, err)
	return _c
}

func (_c *MockGetBookingHandler_Handle_Call) RunAndReturn(run func(ctx context.Context, qry GetBooking) (*domain.Booking, error)) *MockGetBookingHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}
