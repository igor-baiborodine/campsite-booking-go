// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package query

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockGetVacantDatesHandler creates a new instance of MockGetVacantDatesHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetVacantDatesHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetVacantDatesHandler {
	mock := &MockGetVacantDatesHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGetVacantDatesHandler is an autogenerated mock type for the GetVacantDatesHandler type
type MockGetVacantDatesHandler struct {
	mock.Mock
}

type MockGetVacantDatesHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetVacantDatesHandler) EXPECT() *MockGetVacantDatesHandler_Expecter {
	return &MockGetVacantDatesHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function for the type MockGetVacantDatesHandler
func (_mock *MockGetVacantDatesHandler) Handle(ctx context.Context, qry GetVacantDates) ([]string, error) {
	ret := _mock.Called(ctx, qry)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetVacantDates) ([]string, error)); ok {
		return returnFunc(ctx, qry)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetVacantDates) []string); ok {
		r0 = returnFunc(ctx, qry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, GetVacantDates) error); ok {
		r1 = returnFunc(ctx, qry)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGetVacantDatesHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockGetVacantDatesHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - qry GetVacantDates
func (_e *MockGetVacantDatesHandler_Expecter) Handle(ctx interface{}, qry interface{}) *MockGetVacantDatesHandler_Handle_Call {
	return &MockGetVacantDatesHandler_Handle_Call{Call: _e.mock.On("Handle", ctx, qry)}
}

func (_c *MockGetVacantDatesHandler_Handle_Call) Run(run func(ctx context.Context, qry GetVacantDates)) *MockGetVacantDatesHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 GetVacantDates
		if args[1] != nil {
			arg1 = args[1].(GetVacantDates)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGetVacantDatesHandler_Handle_Call) Return(strings []string, err error) *MockGetVacantDatesHandler_Handle_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockGetVacantDatesHandler_Handle_Call) RunAndReturn(run func(ctx context.Context, qry GetVacantDates) ([]string, error)) *MockGetVacantDatesHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}
