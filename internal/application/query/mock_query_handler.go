// Code generated by mockery v2.43.2. DO NOT EDIT.

package query

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockQueryHandler is an autogenerated mock type for the QueryHandler type
type MockQueryHandler[Q interface{}, R interface{}] struct {
	mock.Mock
}

// Handle provides a mock function with given fields: ctx, q
func (_m *MockQueryHandler[Q, R]) Handle(ctx context.Context, q Q) (R, error) {
	ret := _m.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 R
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Q) (R, error)); ok {
		return rf(ctx, q)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Q) R); ok {
		r0 = rf(ctx, q)
	} else {
		r0 = ret.Get(0).(R)
	}

	if rf, ok := ret.Get(1).(func(context.Context, Q) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockQueryHandler creates a new instance of MockQueryHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryHandler[Q interface{}, R interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryHandler[Q, R] {
	mock := &MockQueryHandler[Q, R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
