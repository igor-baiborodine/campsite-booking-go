// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package query

import (
	"context"

	"github.com/igor-baiborodine/campsite-booking-go/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockGetCampsitesHandler creates a new instance of MockGetCampsitesHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetCampsitesHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetCampsitesHandler {
	mock := &MockGetCampsitesHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGetCampsitesHandler is an autogenerated mock type for the GetCampsitesHandler type
type MockGetCampsitesHandler struct {
	mock.Mock
}

type MockGetCampsitesHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetCampsitesHandler) EXPECT() *MockGetCampsitesHandler_Expecter {
	return &MockGetCampsitesHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function for the type MockGetCampsitesHandler
func (_mock *MockGetCampsitesHandler) Handle(ctx context.Context, qry GetCampsites) ([]*domain.Campsite, error) {
	ret := _mock.Called(ctx, qry)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 []*domain.Campsite
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetCampsites) ([]*domain.Campsite, error)); ok {
		return returnFunc(ctx, qry)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, GetCampsites) []*domain.Campsite); ok {
		r0 = returnFunc(ctx, qry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Campsite)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, GetCampsites) error); ok {
		r1 = returnFunc(ctx, qry)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGetCampsitesHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockGetCampsitesHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - qry GetCampsites
func (_e *MockGetCampsitesHandler_Expecter) Handle(ctx interface{}, qry interface{}) *MockGetCampsitesHandler_Handle_Call {
	return &MockGetCampsitesHandler_Handle_Call{Call: _e.mock.On("Handle", ctx, qry)}
}

func (_c *MockGetCampsitesHandler_Handle_Call) Run(run func(ctx context.Context, qry GetCampsites)) *MockGetCampsitesHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 GetCampsites
		if args[1] != nil {
			arg1 = args[1].(GetCampsites)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGetCampsitesHandler_Handle_Call) Return(campsites []*domain.Campsite, err error) *MockGetCampsitesHandler_Handle_Call {
	_c.Call.Return(campsites, err)
	return _c
}

func (_c *MockGetCampsitesHandler_Handle_Call) RunAndReturn(run func(ctx context.Context, qry GetCampsites) ([]*domain.Campsite, error)) *MockGetCampsitesHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}
