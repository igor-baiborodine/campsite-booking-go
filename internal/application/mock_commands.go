// Code generated by mockery v2.43.2. DO NOT EDIT.

package application

import (
	context "context"

	command "github.com/igor-baiborodine/campsite-booking-go/internal/application/command"

	domain "github.com/igor-baiborodine/campsite-booking-go/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockCommands is an autogenerated mock type for the Commands type
type MockCommands struct {
	mock.Mock
}

// CancelBooking provides a mock function with given fields: ctx, cmd
func (_m *MockCommands) CancelBooking(ctx context.Context, cmd command.CancelBooking) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CancelBooking")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CancelBooking) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBooking provides a mock function with given fields: ctx, cmd
func (_m *MockCommands) CreateBooking(ctx context.Context, cmd command.CreateBooking) (*domain.Booking, error) {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CreateBooking")
	}

	var r0 *domain.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateBooking) (*domain.Booking, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateBooking) *domain.Booking); ok {
		r0 = rf(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Booking)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.CreateBooking) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCampsite provides a mock function with given fields: ctx, cmd
func (_m *MockCommands) CreateCampsite(ctx context.Context, cmd command.CreateCampsite) (*domain.Campsite, error) {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CreateCampsite")
	}

	var r0 *domain.Campsite
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateCampsite) (*domain.Campsite, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateCampsite) *domain.Campsite); ok {
		r0 = rf(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Campsite)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.CreateCampsite) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBooking provides a mock function with given fields: ctx, cmd
func (_m *MockCommands) UpdateBooking(ctx context.Context, cmd command.UpdateBooking) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBooking")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.UpdateBooking) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockCommands creates a new instance of MockCommands. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommands(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommands {
	mock := &MockCommands{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
