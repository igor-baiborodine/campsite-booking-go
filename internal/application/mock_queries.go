// Code generated by mockery v2.43.1. DO NOT EDIT.

package application

import (
	context "context"

	domain "github.com/igor-baiborodine/campsite-booking-go/internal/domain"
	mock "github.com/stretchr/testify/mock"

	queries "github.com/igor-baiborodine/campsite-booking-go/internal/application/queries"
)

// MockQueries is an autogenerated mock type for the Queries type
type MockQueries struct {
	mock.Mock
}

// GetBooking provides a mock function with given fields: ctx, qry
func (_m *MockQueries) GetBooking(ctx context.Context, qry queries.GetBooking) (*domain.Booking, error) {
	ret := _m.Called(ctx, qry)

	if len(ret) == 0 {
		panic("no return value specified for GetBooking")
	}

	var r0 *domain.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, queries.GetBooking) (*domain.Booking, error)); ok {
		return rf(ctx, qry)
	}
	if rf, ok := ret.Get(0).(func(context.Context, queries.GetBooking) *domain.Booking); ok {
		r0 = rf(ctx, qry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Booking)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, queries.GetBooking) error); ok {
		r1 = rf(ctx, qry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCampsites provides a mock function with given fields: ctx, _a1
func (_m *MockQueries) GetCampsites(ctx context.Context, _a1 queries.GetCampsites) ([]*domain.Campsite, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCampsites")
	}

	var r0 []*domain.Campsite
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, queries.GetCampsites) ([]*domain.Campsite, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, queries.GetCampsites) []*domain.Campsite); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Campsite)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, queries.GetCampsites) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVacantDates provides a mock function with given fields: ctx, qry
func (_m *MockQueries) GetVacantDates(ctx context.Context, qry queries.GetVacantDates) ([]string, error) {
	ret := _m.Called(ctx, qry)

	if len(ret) == 0 {
		panic("no return value specified for GetVacantDates")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, queries.GetVacantDates) ([]string, error)); ok {
		return rf(ctx, qry)
	}
	if rf, ok := ret.Get(0).(func(context.Context, queries.GetVacantDates) []string); ok {
		r0 = rf(ctx, qry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, queries.GetVacantDates) error); ok {
		r1 = rf(ctx, qry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockQueries creates a new instance of MockQueries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueries(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueries {
	mock := &MockQueries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
