// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package application

import (
	"context"

	"github.com/igor-baiborodine/campsite-booking-go/internal/application/command"
	"github.com/igor-baiborodine/campsite-booking-go/internal/application/query"
	"github.com/igor-baiborodine/campsite-booking-go/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockApp creates a new instance of MockApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApp {
	mock := &MockApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockApp is an autogenerated mock type for the App type
type MockApp struct {
	mock.Mock
}

type MockApp_Expecter struct {
	mock *mock.Mock
}

func (_m *MockApp) EXPECT() *MockApp_Expecter {
	return &MockApp_Expecter{mock: &_m.Mock}
}

// CancelBooking provides a mock function for the type MockApp
func (_mock *MockApp) CancelBooking(ctx context.Context, cmd command.CancelBooking) error {
	ret := _mock.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CancelBooking")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, command.CancelBooking) error); ok {
		r0 = returnFunc(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockApp_CancelBooking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelBooking'
type MockApp_CancelBooking_Call struct {
	*mock.Call
}

// CancelBooking is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd command.CancelBooking
func (_e *MockApp_Expecter) CancelBooking(ctx interface{}, cmd interface{}) *MockApp_CancelBooking_Call {
	return &MockApp_CancelBooking_Call{Call: _e.mock.On("CancelBooking", ctx, cmd)}
}

func (_c *MockApp_CancelBooking_Call) Run(run func(ctx context.Context, cmd command.CancelBooking)) *MockApp_CancelBooking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 command.CancelBooking
		if args[1] != nil {
			arg1 = args[1].(command.CancelBooking)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockApp_CancelBooking_Call) Return(err error) *MockApp_CancelBooking_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockApp_CancelBooking_Call) RunAndReturn(run func(ctx context.Context, cmd command.CancelBooking) error) *MockApp_CancelBooking_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBooking provides a mock function for the type MockApp
func (_mock *MockApp) CreateBooking(ctx context.Context, cmd command.CreateBooking) error {
	ret := _mock.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CreateBooking")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, command.CreateBooking) error); ok {
		r0 = returnFunc(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockApp_CreateBooking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBooking'
type MockApp_CreateBooking_Call struct {
	*mock.Call
}

// CreateBooking is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd command.CreateBooking
func (_e *MockApp_Expecter) CreateBooking(ctx interface{}, cmd interface{}) *MockApp_CreateBooking_Call {
	return &MockApp_CreateBooking_Call{Call: _e.mock.On("CreateBooking", ctx, cmd)}
}

func (_c *MockApp_CreateBooking_Call) Run(run func(ctx context.Context, cmd command.CreateBooking)) *MockApp_CreateBooking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 command.CreateBooking
		if args[1] != nil {
			arg1 = args[1].(command.CreateBooking)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockApp_CreateBooking_Call) Return(err error) *MockApp_CreateBooking_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockApp_CreateBooking_Call) RunAndReturn(run func(ctx context.Context, cmd command.CreateBooking) error) *MockApp_CreateBooking_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCampsite provides a mock function for the type MockApp
func (_mock *MockApp) CreateCampsite(ctx context.Context, cmd command.CreateCampsite) error {
	ret := _mock.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CreateCampsite")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, command.CreateCampsite) error); ok {
		r0 = returnFunc(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockApp_CreateCampsite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCampsite'
type MockApp_CreateCampsite_Call struct {
	*mock.Call
}

// CreateCampsite is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd command.CreateCampsite
func (_e *MockApp_Expecter) CreateCampsite(ctx interface{}, cmd interface{}) *MockApp_CreateCampsite_Call {
	return &MockApp_CreateCampsite_Call{Call: _e.mock.On("CreateCampsite", ctx, cmd)}
}

func (_c *MockApp_CreateCampsite_Call) Run(run func(ctx context.Context, cmd command.CreateCampsite)) *MockApp_CreateCampsite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 command.CreateCampsite
		if args[1] != nil {
			arg1 = args[1].(command.CreateCampsite)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockApp_CreateCampsite_Call) Return(err error) *MockApp_CreateCampsite_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockApp_CreateCampsite_Call) RunAndReturn(run func(ctx context.Context, cmd command.CreateCampsite) error) *MockApp_CreateCampsite_Call {
	_c.Call.Return(run)
	return _c
}

// GetBooking provides a mock function for the type MockApp
func (_mock *MockApp) GetBooking(ctx context.Context, qry query.GetBooking) (*domain.Booking, error) {
	ret := _mock.Called(ctx, qry)

	if len(ret) == 0 {
		panic("no return value specified for GetBooking")
	}

	var r0 *domain.Booking
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, query.GetBooking) (*domain.Booking, error)); ok {
		return returnFunc(ctx, qry)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, query.GetBooking) *domain.Booking); ok {
		r0 = returnFunc(ctx, qry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Booking)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, query.GetBooking) error); ok {
		r1 = returnFunc(ctx, qry)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockApp_GetBooking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBooking'
type MockApp_GetBooking_Call struct {
	*mock.Call
}

// GetBooking is a helper method to define mock.On call
//   - ctx context.Context
//   - qry query.GetBooking
func (_e *MockApp_Expecter) GetBooking(ctx interface{}, qry interface{}) *MockApp_GetBooking_Call {
	return &MockApp_GetBooking_Call{Call: _e.mock.On("GetBooking", ctx, qry)}
}

func (_c *MockApp_GetBooking_Call) Run(run func(ctx context.Context, qry query.GetBooking)) *MockApp_GetBooking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 query.GetBooking
		if args[1] != nil {
			arg1 = args[1].(query.GetBooking)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockApp_GetBooking_Call) Return(booking *domain.Booking, err error) *MockApp_GetBooking_Call {
	_c.Call.Return(booking, err)
	return _c
}

func (_c *MockApp_GetBooking_Call) RunAndReturn(run func(ctx context.Context, qry query.GetBooking) (*domain.Booking, error)) *MockApp_GetBooking_Call {
	_c.Call.Return(run)
	return _c
}

// GetCampsites provides a mock function for the type MockApp
func (_mock *MockApp) GetCampsites(ctx context.Context, qry query.GetCampsites) ([]*domain.Campsite, error) {
	ret := _mock.Called(ctx, qry)

	if len(ret) == 0 {
		panic("no return value specified for GetCampsites")
	}

	var r0 []*domain.Campsite
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, query.GetCampsites) ([]*domain.Campsite, error)); ok {
		return returnFunc(ctx, qry)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, query.GetCampsites) []*domain.Campsite); ok {
		r0 = returnFunc(ctx, qry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Campsite)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, query.GetCampsites) error); ok {
		r1 = returnFunc(ctx, qry)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockApp_GetCampsites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCampsites'
type MockApp_GetCampsites_Call struct {
	*mock.Call
}

// GetCampsites is a helper method to define mock.On call
//   - ctx context.Context
//   - qry query.GetCampsites
func (_e *MockApp_Expecter) GetCampsites(ctx interface{}, qry interface{}) *MockApp_GetCampsites_Call {
	return &MockApp_GetCampsites_Call{Call: _e.mock.On("GetCampsites", ctx, qry)}
}

func (_c *MockApp_GetCampsites_Call) Run(run func(ctx context.Context, qry query.GetCampsites)) *MockApp_GetCampsites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 query.GetCampsites
		if args[1] != nil {
			arg1 = args[1].(query.GetCampsites)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockApp_GetCampsites_Call) Return(campsites []*domain.Campsite, err error) *MockApp_GetCampsites_Call {
	_c.Call.Return(campsites, err)
	return _c
}

func (_c *MockApp_GetCampsites_Call) RunAndReturn(run func(ctx context.Context, qry query.GetCampsites) ([]*domain.Campsite, error)) *MockApp_GetCampsites_Call {
	_c.Call.Return(run)
	return _c
}

// GetVacantDates provides a mock function for the type MockApp
func (_mock *MockApp) GetVacantDates(ctx context.Context, qry query.GetVacantDates) ([]string, error) {
	ret := _mock.Called(ctx, qry)

	if len(ret) == 0 {
		panic("no return value specified for GetVacantDates")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, query.GetVacantDates) ([]string, error)); ok {
		return returnFunc(ctx, qry)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, query.GetVacantDates) []string); ok {
		r0 = returnFunc(ctx, qry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, query.GetVacantDates) error); ok {
		r1 = returnFunc(ctx, qry)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockApp_GetVacantDates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVacantDates'
type MockApp_GetVacantDates_Call struct {
	*mock.Call
}

// GetVacantDates is a helper method to define mock.On call
//   - ctx context.Context
//   - qry query.GetVacantDates
func (_e *MockApp_Expecter) GetVacantDates(ctx interface{}, qry interface{}) *MockApp_GetVacantDates_Call {
	return &MockApp_GetVacantDates_Call{Call: _e.mock.On("GetVacantDates", ctx, qry)}
}

func (_c *MockApp_GetVacantDates_Call) Run(run func(ctx context.Context, qry query.GetVacantDates)) *MockApp_GetVacantDates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 query.GetVacantDates
		if args[1] != nil {
			arg1 = args[1].(query.GetVacantDates)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockApp_GetVacantDates_Call) Return(strings []string, err error) *MockApp_GetVacantDates_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockApp_GetVacantDates_Call) RunAndReturn(run func(ctx context.Context, qry query.GetVacantDates) ([]string, error)) *MockApp_GetVacantDates_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBooking provides a mock function for the type MockApp
func (_mock *MockApp) UpdateBooking(ctx context.Context, cmd command.UpdateBooking) error {
	ret := _mock.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBooking")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, command.UpdateBooking) error); ok {
		r0 = returnFunc(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockApp_UpdateBooking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBooking'
type MockApp_UpdateBooking_Call struct {
	*mock.Call
}

// UpdateBooking is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd command.UpdateBooking
func (_e *MockApp_Expecter) UpdateBooking(ctx interface{}, cmd interface{}) *MockApp_UpdateBooking_Call {
	return &MockApp_UpdateBooking_Call{Call: _e.mock.On("UpdateBooking", ctx, cmd)}
}

func (_c *MockApp_UpdateBooking_Call) Run(run func(ctx context.Context, cmd command.UpdateBooking)) *MockApp_UpdateBooking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 command.UpdateBooking
		if args[1] != nil {
			arg1 = args[1].(command.UpdateBooking)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockApp_UpdateBooking_Call) Return(err error) *MockApp_UpdateBooking_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockApp_UpdateBooking_Call) RunAndReturn(run func(ctx context.Context, cmd command.UpdateBooking) error) *MockApp_UpdateBooking_Call {
	_c.Call.Return(run)
	return _c
}
