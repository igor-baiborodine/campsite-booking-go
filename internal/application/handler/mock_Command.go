// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package handler

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCommand creates a new instance of MockCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommand[C any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommand[C] {
	mock := &MockCommand[C]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCommand is an autogenerated mock type for the Command type
type MockCommand[C any] struct {
	mock.Mock
}

type MockCommand_Expecter[C any] struct {
	mock *mock.Mock
}

func (_m *MockCommand[C]) EXPECT() *MockCommand_Expecter[C] {
	return &MockCommand_Expecter[C]{mock: &_m.Mock}
}

// Handle provides a mock function for the type MockCommand
func (_mock *MockCommand[C]) Handle(ctx context.Context, cmd C) error {
	ret := _mock.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, C) error); ok {
		r0 = returnFunc(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCommand_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockCommand_Handle_Call[C any] struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd C
func (_e *MockCommand_Expecter[C]) Handle(ctx interface{}, cmd interface{}) *MockCommand_Handle_Call[C] {
	return &MockCommand_Handle_Call[C]{Call: _e.mock.On("Handle", ctx, cmd)}
}

func (_c *MockCommand_Handle_Call[C]) Run(run func(ctx context.Context, cmd C)) *MockCommand_Handle_Call[C] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 C
		if args[1] != nil {
			arg1 = args[1].(C)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCommand_Handle_Call[C]) Return(err error) *MockCommand_Handle_Call[C] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCommand_Handle_Call[C]) RunAndReturn(run func(ctx context.Context, cmd C) error) *MockCommand_Handle_Call[C] {
	_c.Call.Return(run)
	return _c
}
