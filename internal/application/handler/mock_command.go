// Code generated by mockery v2.43.2. DO NOT EDIT.

package handler

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCommand is an autogenerated mock type for the Command type
type MockCommand[C interface{}] struct {
	mock.Mock
}

// Handle provides a mock function with given fields: ctx, cmd
func (_m *MockCommand[C]) Handle(ctx context.Context, cmd C) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, C) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockCommand creates a new instance of MockCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommand[C interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommand[C] {
	mock := &MockCommand[C]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
