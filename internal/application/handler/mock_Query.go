// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package handler

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockQuery creates a new instance of MockQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuery[Q any, R any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuery[Q, R] {
	mock := &MockQuery[Q, R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuery is an autogenerated mock type for the Query type
type MockQuery[Q any, R any] struct {
	mock.Mock
}

type MockQuery_Expecter[Q any, R any] struct {
	mock *mock.Mock
}

func (_m *MockQuery[Q, R]) EXPECT() *MockQuery_Expecter[Q, R] {
	return &MockQuery_Expecter[Q, R]{mock: &_m.Mock}
}

// Handle provides a mock function for the type MockQuery
func (_mock *MockQuery[Q, R]) Handle(ctx context.Context, qry Q) (R, error) {
	ret := _mock.Called(ctx, qry)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 R
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, Q) (R, error)); ok {
		return returnFunc(ctx, qry)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, Q) R); ok {
		r0 = returnFunc(ctx, qry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(R)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, Q) error); ok {
		r1 = returnFunc(ctx, qry)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuery_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockQuery_Handle_Call[Q any, R any] struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - qry Q
func (_e *MockQuery_Expecter[Q, R]) Handle(ctx interface{}, qry interface{}) *MockQuery_Handle_Call[Q, R] {
	return &MockQuery_Handle_Call[Q, R]{Call: _e.mock.On("Handle", ctx, qry)}
}

func (_c *MockQuery_Handle_Call[Q, R]) Run(run func(ctx context.Context, qry Q)) *MockQuery_Handle_Call[Q, R] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 Q
		if args[1] != nil {
			arg1 = args[1].(Q)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuery_Handle_Call[Q, R]) Return(v R, err error) *MockQuery_Handle_Call[Q, R] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockQuery_Handle_Call[Q, R]) RunAndReturn(run func(ctx context.Context, qry Q) (R, error)) *MockQuery_Handle_Call[Q, R] {
	_c.Call.Return(run)
	return _c
}
