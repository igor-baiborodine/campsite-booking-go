// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: campsitespb/v1/api.proto

package campsitesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CampsitesService_GetCampsites_FullMethodName   = "/campsites.v1.CampsitesService/GetCampsites"
	CampsitesService_CreateCampsite_FullMethodName = "/campsites.v1.CampsitesService/CreateCampsite"
	CampsitesService_GetBooking_FullMethodName     = "/campsites.v1.CampsitesService/GetBooking"
	CampsitesService_CreateBooking_FullMethodName  = "/campsites.v1.CampsitesService/CreateBooking"
	CampsitesService_UpdateBooking_FullMethodName  = "/campsites.v1.CampsitesService/UpdateBooking"
	CampsitesService_CancelBooking_FullMethodName  = "/campsites.v1.CampsitesService/CancelBooking"
	CampsitesService_GetVacantDates_FullMethodName = "/campsites.v1.CampsitesService/GetVacantDates"
)

// CampsitesServiceClient is the client API for CampsitesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CampsitesServiceClient interface {
	GetCampsites(ctx context.Context, in *GetCampsitesRequest, opts ...grpc.CallOption) (*GetCampsitesResponse, error)
	CreateCampsite(ctx context.Context, in *CreateCampsiteRequest, opts ...grpc.CallOption) (*CreateCampsiteResponse, error)
	GetBooking(ctx context.Context, in *GetBookingRequest, opts ...grpc.CallOption) (*GetBookingResponse, error)
	CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*CreateBookingResponse, error)
	UpdateBooking(ctx context.Context, in *UpdateBookingRequest, opts ...grpc.CallOption) (*UpdateBookingResponse, error)
	CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*CancelBookingResponse, error)
	GetVacantDates(ctx context.Context, in *GetVacantDatesRequest, opts ...grpc.CallOption) (*GetVacantDatesResponse, error)
}

type campsitesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCampsitesServiceClient(cc grpc.ClientConnInterface) CampsitesServiceClient {
	return &campsitesServiceClient{cc}
}

func (c *campsitesServiceClient) GetCampsites(ctx context.Context, in *GetCampsitesRequest, opts ...grpc.CallOption) (*GetCampsitesResponse, error) {
	out := new(GetCampsitesResponse)
	err := c.cc.Invoke(ctx, CampsitesService_GetCampsites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campsitesServiceClient) CreateCampsite(ctx context.Context, in *CreateCampsiteRequest, opts ...grpc.CallOption) (*CreateCampsiteResponse, error) {
	out := new(CreateCampsiteResponse)
	err := c.cc.Invoke(ctx, CampsitesService_CreateCampsite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campsitesServiceClient) GetBooking(ctx context.Context, in *GetBookingRequest, opts ...grpc.CallOption) (*GetBookingResponse, error) {
	out := new(GetBookingResponse)
	err := c.cc.Invoke(ctx, CampsitesService_GetBooking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campsitesServiceClient) CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*CreateBookingResponse, error) {
	out := new(CreateBookingResponse)
	err := c.cc.Invoke(ctx, CampsitesService_CreateBooking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campsitesServiceClient) UpdateBooking(ctx context.Context, in *UpdateBookingRequest, opts ...grpc.CallOption) (*UpdateBookingResponse, error) {
	out := new(UpdateBookingResponse)
	err := c.cc.Invoke(ctx, CampsitesService_UpdateBooking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campsitesServiceClient) CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*CancelBookingResponse, error) {
	out := new(CancelBookingResponse)
	err := c.cc.Invoke(ctx, CampsitesService_CancelBooking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campsitesServiceClient) GetVacantDates(ctx context.Context, in *GetVacantDatesRequest, opts ...grpc.CallOption) (*GetVacantDatesResponse, error) {
	out := new(GetVacantDatesResponse)
	err := c.cc.Invoke(ctx, CampsitesService_GetVacantDates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampsitesServiceServer is the server API for CampsitesService service.
// All implementations must embed UnimplementedCampsitesServiceServer
// for forward compatibility
type CampsitesServiceServer interface {
	GetCampsites(context.Context, *GetCampsitesRequest) (*GetCampsitesResponse, error)
	CreateCampsite(context.Context, *CreateCampsiteRequest) (*CreateCampsiteResponse, error)
	GetBooking(context.Context, *GetBookingRequest) (*GetBookingResponse, error)
	CreateBooking(context.Context, *CreateBookingRequest) (*CreateBookingResponse, error)
	UpdateBooking(context.Context, *UpdateBookingRequest) (*UpdateBookingResponse, error)
	CancelBooking(context.Context, *CancelBookingRequest) (*CancelBookingResponse, error)
	GetVacantDates(context.Context, *GetVacantDatesRequest) (*GetVacantDatesResponse, error)
	mustEmbedUnimplementedCampsitesServiceServer()
}

// UnimplementedCampsitesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCampsitesServiceServer struct {
}

func (UnimplementedCampsitesServiceServer) GetCampsites(context.Context, *GetCampsitesRequest) (*GetCampsitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampsites not implemented")
}
func (UnimplementedCampsitesServiceServer) CreateCampsite(context.Context, *CreateCampsiteRequest) (*CreateCampsiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampsite not implemented")
}
func (UnimplementedCampsitesServiceServer) GetBooking(context.Context, *GetBookingRequest) (*GetBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooking not implemented")
}
func (UnimplementedCampsitesServiceServer) CreateBooking(context.Context, *CreateBookingRequest) (*CreateBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBooking not implemented")
}
func (UnimplementedCampsitesServiceServer) UpdateBooking(context.Context, *UpdateBookingRequest) (*UpdateBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBooking not implemented")
}
func (UnimplementedCampsitesServiceServer) CancelBooking(context.Context, *CancelBookingRequest) (*CancelBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBooking not implemented")
}
func (UnimplementedCampsitesServiceServer) GetVacantDates(context.Context, *GetVacantDatesRequest) (*GetVacantDatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVacantDates not implemented")
}
func (UnimplementedCampsitesServiceServer) mustEmbedUnimplementedCampsitesServiceServer() {}

// UnsafeCampsitesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CampsitesServiceServer will
// result in compilation errors.
type UnsafeCampsitesServiceServer interface {
	mustEmbedUnimplementedCampsitesServiceServer()
}

func RegisterCampsitesServiceServer(s grpc.ServiceRegistrar, srv CampsitesServiceServer) {
	s.RegisterService(&CampsitesService_ServiceDesc, srv)
}

func _CampsitesService_GetCampsites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampsitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampsitesServiceServer).GetCampsites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampsitesService_GetCampsites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampsitesServiceServer).GetCampsites(ctx, req.(*GetCampsitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampsitesService_CreateCampsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCampsiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampsitesServiceServer).CreateCampsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampsitesService_CreateCampsite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampsitesServiceServer).CreateCampsite(ctx, req.(*CreateCampsiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampsitesService_GetBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampsitesServiceServer).GetBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampsitesService_GetBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampsitesServiceServer).GetBooking(ctx, req.(*GetBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampsitesService_CreateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampsitesServiceServer).CreateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampsitesService_CreateBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampsitesServiceServer).CreateBooking(ctx, req.(*CreateBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampsitesService_UpdateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampsitesServiceServer).UpdateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampsitesService_UpdateBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampsitesServiceServer).UpdateBooking(ctx, req.(*UpdateBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampsitesService_CancelBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampsitesServiceServer).CancelBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampsitesService_CancelBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampsitesServiceServer).CancelBooking(ctx, req.(*CancelBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampsitesService_GetVacantDates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVacantDatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampsitesServiceServer).GetVacantDates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampsitesService_GetVacantDates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampsitesServiceServer).GetVacantDates(ctx, req.(*GetVacantDatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CampsitesService_ServiceDesc is the grpc.ServiceDesc for CampsitesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CampsitesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "campsites.v1.CampsitesService",
	HandlerType: (*CampsitesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCampsites",
			Handler:    _CampsitesService_GetCampsites_Handler,
		},
		{
			MethodName: "CreateCampsite",
			Handler:    _CampsitesService_CreateCampsite_Handler,
		},
		{
			MethodName: "GetBooking",
			Handler:    _CampsitesService_GetBooking_Handler,
		},
		{
			MethodName: "CreateBooking",
			Handler:    _CampsitesService_CreateBooking_Handler,
		},
		{
			MethodName: "UpdateBooking",
			Handler:    _CampsitesService_UpdateBooking_Handler,
		},
		{
			MethodName: "CancelBooking",
			Handler:    _CampsitesService_CancelBooking_Handler,
		},
		{
			MethodName: "GetVacantDates",
			Handler:    _CampsitesService_GetVacantDates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "campsitespb/v1/api.proto",
}
